// AI Model Manager - Encapsulated Module
const AIModelManager = (function() {
    // Private variables
    const API_KEYS = {
        dalle3: localStorage.getItem('dalle3_api_key') || '',
        stability: localStorage.getItem('stability_api_key') || '',
        turbo: localStorage.getItem('turbo_password') || ''
    };
    
    const MODEL_ENDPOINTS = {
        dalle3: 'https://api.openai.com/v1/images/generations',
        stability: 'https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image'
    };
    
    let currentModel = 'flux'; // Default to flux
    
    // DOM Elements
    const modelSelect = document.getElementById('model');
    const apiKeyModal = document.getElementById('api-key-modal');
    const apiKeyInput = document.getElementById('api-key-input');
    const apiKeyTitle = document.getElementById('api-key-modal-title');
    const apiKeyInstructions = document.getElementById('api-key-instructions');
    const apiKeyNote = document.getElementById('api-key-note');
    const validateApiKeyBtn = document.getElementById('validate-api-key-btn');
    const cancelApiKeyBtn = document.getElementById('cancel-api-key-btn');
    const closeApiKeyModal = document.getElementById('close-api-key-modal');
    const safeFilterCheckbox = document.getElementById('safe-filter');
    const resetBtn = document.getElementById('reset-btn');
    
    // Private methods
    function showApiKeyModal(model) {
        currentModel = model;
        
        const oldShowPassword = document.getElementById('show-password');
        if (oldShowPassword) {
            oldShowPassword.replaceWith(oldShowPassword.cloneNode(true));
        }
        
        if (model === 'dalle3') {
            apiKeyTitle.innerHTML = '<i class="fas fa-key"></i> OpenAI API Key Required';
            apiKeyInstructions.textContent = 'Please enter your OpenAI API key to use DALL-E 3.';
            apiKeyNote.innerHTML = 'Get your API key from <a href="https://platform.openai.com/api-keys" target="_blank">OpenAI</a>.';
            apiKeyInput.value = API_KEYS.dalle3;
            apiKeyInput.placeholder = 'sk-...';
            apiKeyInput.type = 'password';
        } else if (model === 'stability') {
            apiKeyTitle.innerHTML = '<i class="fas fa-key"></i> Stability AI API Key Required';
            apiKeyInstructions.textContent = 'Please enter your Stability AI API key.';
            apiKeyNote.innerHTML = 'Get your API key from <a href="https://platform.stability.ai/account/keys" target="_blank">Stability AI</a>.';
            apiKeyInput.value = API_KEYS.stability;
            apiKeyInput.placeholder = 'sk-...';
            apiKeyInput.type = 'password';
        } else if (model === 'turbo') {
            apiKeyTitle.innerHTML = '<i class="fas fa-lock"></i> Turbo Model Password';
            apiKeyInstructions.textContent = 'Please enter the password to access Turbo model.';
            apiKeyNote.innerHTML = `
                <div style="margin-top: 10px;">
                    <input type="checkbox" id="show-password"> Show password
                </div>
                <div style="margin-top: 10px; color: var(--danger);">
                    <i class="fas fa-exclamation-triangle"></i> Warning: Any content generated by AI is your own responsibility.
                </div>
            `;
            apiKeyInput.value = API_KEYS.turbo;
            apiKeyInput.placeholder = 'Enter password...';
            apiKeyInput.type = 'password';
            
            document.getElementById('show-password')?.addEventListener('change', function(e) {
                apiKeyInput.type = e.target.checked ? 'text' : 'password';
            });
        }
        
        apiKeyModal.style.display = 'flex';
        apiKeyInput.focus();
    }
    
    function hideApiKeyModal() {
        apiKeyModal.style.display = 'none';
    }
    
    function clearAllData() {
        // Clear memory
        API_KEYS.dalle3 = '';
        API_KEYS.stability = '';
        API_KEYS.turbo = '';
        
        // Clear localStorage completely
        localStorage.clear();
        
        // Reset form values
        if (modelSelect) modelSelect.value = 'flux';
        if (safeFilterCheckbox) safeFilterCheckbox.checked = true;
        if (apiKeyInput) apiKeyInput.value = '';
        
        // Reset current model
        currentModel = 'flux';
        
        // Clear any session data if needed
        sessionStorage.clear();
    }
    
    async function validateApiKey() {
        const apiKey = apiKeyInput.value.trim();
        if (!apiKey) {
            showError('Please enter a valid API key/password');
            return;
        }
        
        validateApiKeyBtn.disabled = true;
        validateApiKeyBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Validating...';
        
        try {
            let isValid = false;
            
            if (currentModel === 'dalle3') {
                isValid = await validateOpenAIKey(apiKey);
            } else if (currentModel === 'stability') {
                isValid = await validateStabilityKey(apiKey);
            } else if (currentModel === 'turbo') {
                isValid = apiKey === 'ruangriungxyz';
                if (isValid) {
                    if (safeFilterCheckbox) safeFilterCheckbox.checked = false;
                }
            }
            
            if (isValid) {
                API_KEYS[currentModel] = apiKey;
                localStorage.setItem(
                    currentModel === 'turbo' ? 'turbo_password' : 
                    currentModel === 'dalle3' ? 'dalle3_api_key' : 'stability_api_key', 
                    apiKey
                );
                
                hideApiKeyModal();
                
                if (modelSelect) modelSelect.value = currentModel;
                
                showSuccess(
                    currentModel === 'turbo' ? 
                    'Password validated! <span style="color: var(--danger)">NSFW filter has been disabled</span>' : 
                    'API key validated successfully!'
                );
            } else {
                showError('Invalid API key/password. Please check and try again.');
                if (modelSelect) modelSelect.value = 'flux';
                currentModel = 'flux';
            }
        } catch (error) {
            console.error('Validation error:', error);
            showError('Error validating API key. Please try again.');
            if (modelSelect) modelSelect.value = 'flux';
            currentModel = 'flux';
        } finally {
            validateApiKeyBtn.disabled = false;
            validateApiKeyBtn.textContent = 'Validate & Save';
        }
    }
    
    async function validateOpenAIKey(apiKey) {
        try {
            const response = await fetch('https://api.openai.com/v1/models', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${apiKey}`
                }
            });
            return response.ok && (await response.json()).data;
        } catch (error) {
            console.error('OpenAI validation error:', error);
            return false;
        }
    }
    
    async function validateStabilityKey(apiKey) {
        try {
            const response = await fetch('https://api.stability.ai/v1/user/account', {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${apiKey}`
                }
            });
            return response.ok;
        } catch (error) {
            console.error('Stability validation error:', error);
            return false;
        }
    }
    
    function handleModelChange() {
        if (!modelSelect) return true;
        
        const selectedModel = modelSelect.value;
        
        if (['turbo', 'dalle3', 'stability'].includes(selectedModel)) {
            if (!API_KEYS[selectedModel]) {
                showApiKeyModal(selectedModel);
                return false;
            }
            
            if (selectedModel === 'turbo' && safeFilterCheckbox) {
                safeFilterCheckbox.checked = false;
            }
        } else if (selectedModel === 'flux' && safeFilterCheckbox) {
            safeFilterCheckbox.checked = true;
        }
        
        currentModel = selectedModel;
        return true;
    }
    
    function setupResetButton() {
        if (!resetBtn) return;
        
        resetBtn.addEventListener('click', function() {
            Swal.fire({
                title: 'Reset All Data?',
                html: `
                    <div style="color: var(--danger); margin-bottom: 15px;">
                        <i class="fas fa-exclamation-triangle"></i> This will permanently delete:
                    </div>
                    <ul style="text-align: left; margin-left: 20px;">
                        <li>All API keys and passwords</li>
                        <li>Application preferences</li>
                        <li>Session data</li>
                    </ul>
                `,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: 'var(--primary)',
                cancelButtonColor: 'var(--danger)',
                confirmButtonText: 'Yes, reset everything',
                cancelButtonText: 'Cancel',
                background: 'var(--bg)',
                color: 'var(--text)',
                width: '90%',
                maxWidth: '500px'
            }).then((result) => {
                if (result.isConfirmed) {
                    clearAllData();
                    showSuccess('All data has been reset successfully!').then(() => {
                        location.reload();
                    });
                }
            });
        });
    }
    
    // Helper functions
    function showError(message) {
        return Swal.fire({
            title: 'Error',
            html: message,
            icon: 'error',
            confirmButtonColor: 'var(--primary)',
            background: 'var(--bg)',
            color: 'var(--text)'
        });
    }
    
    function showSuccess(message) {
        return Swal.fire({
            title: 'Success',
            html: message,
            icon: 'success',
            confirmButtonColor: 'var(--primary)',
            background: 'var(--bg)',
            color: 'var(--text)'
        });
    }
    
    // Public methods
    async function generateImage(prompt, settings) {
        if (!handleModelChange()) return null;
        
        try {
            switch(currentModel) {
                case 'dalle3':
                    return await generateWithDalle3(prompt, settings);
                case 'stability':
                    return await generateWithStability(prompt, settings);
                case 'turbo':
                    return generateWithPollinations(prompt, settings, 'turbo');
                default:
                    return generateWithPollinations(prompt, settings, 'flux');
            }
        } catch (error) {
            console.error('Generation error:', error);
            showError(error.message || 'Failed to generate image');
            throw error;
        }
    }
    
    async function generateWithDalle3(prompt, settings) {
        const response = await fetch(MODEL_ENDPOINTS.dalle3, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${API_KEYS.dalle3}`
            },
            body: JSON.stringify({
                prompt: prompt,
                model: "dall-e-3",
                size: `${settings.width}x${settings.height}`,
                quality: settings.quality === 'ultra' ? 'hd' : 'standard',
                n: 1
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error?.message || 'DALL-E 3 generation failed');
        }
        
        return (await response.json()).data[0].url;
    }
    
    async function generateWithStability(prompt, settings) {
        const response = await fetch(MODEL_ENDPOINTS.stability, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${API_KEYS.stability}`,
                'Accept': 'application/json'
            },
            body: JSON.stringify({
                text_prompts: [{ text: prompt }],
                cfg_scale: 7,
                height: parseInt(settings.height),
                width: parseInt(settings.width),
                samples: 1,
                steps: 30
            })
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Stability AI generation failed');
        }
        
        return `data:image/png;base64,${(await response.json()).artifacts[0].base64}`;
    }
    
    function generateWithPollinations(prompt, settings, modelType = 'flux') {
        const params = new URLSearchParams({
            width: settings.width || 1024,
            height: settings.height || 1024,
            nologo: true,
            safe: modelType === 'turbo' ? false : settings.safeFilter !== false,
            model: modelType
        });
        
        if (settings.seed) params.set('seed', settings.seed);
        
        return `https://image.pollinations.ai/prompt/${encodeURIComponent(prompt)}?${params}`;
    }
    
    // Initialize
    function init() {
        if (modelSelect) {
            modelSelect.innerHTML = `
                <option value="flux">FLUX</option>
                <option value="turbo">Turbo</option>
                <option value="dalle3">DALL-E 3 (OpenAI)</option>
                <option value="stability">Stability AI</option>
            `;
            modelSelect.value = currentModel;
            modelSelect.addEventListener('change', handleModelChange);
        }
        
        if (validateApiKeyBtn) validateApiKeyBtn.addEventListener('click', validateApiKey);
        if (cancelApiKeyBtn) cancelApiKeyBtn.addEventListener('click', () => {
            if (modelSelect) modelSelect.value = 'flux';
            hideApiKeyModal();
        });
        if (closeApiKeyModal) closeApiKeyModal.addEventListener('click', () => {
            if (modelSelect) modelSelect.value = 'flux';
            hideApiKeyModal();
        });
        if (apiKeyModal) apiKeyModal.addEventListener('click', (e) => {
            if (e.target === apiKeyModal) {
                if (modelSelect) modelSelect.value = 'flux';
                hideApiKeyModal();
            }
        });
        
        setupResetButton();
    }
    
    // Public API
    return {
        init: init,
        generateImage: generateImage,
        clearAllData: clearAllData
    };
})();

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', AIModelManager.init);